"""
이제 제네레이터를 사용하여 함수 컨텍스트에서 데이터를 가져올 수 있고 실행을 일시 중지 할 수 있음을
 알게 되었습니다. 근데 제네레이터에 데이터를 푸시하고 싶다면 어떻게 해야 할까요? 즉 제네레이터 자신이 계속 데이터를 만드는 것이 아니라, 외부에서 제공되는 데이터를 소비하는 역할을 하고 싶습니다. 이때 코루틴이 등장 할 때입니다. 값을 받는데 사용하는 yield 키워드는 함수 내부의 "=" 오른쪽에 있는 표현식으로 사용 할 수도 있습니다. 제네레이터 객체에 대해 send() 메서드를 사용하여 값을 함수로 다시 전달할 수 있는데요.
 이를 "제네레이터 기반 코루틴" 이라고 합니다. 아래는 그 예입니다.
"코루틴은 주거니 받거니 하는 함수이다. 먼가 살아숨쉬는 듯한 녀석"
좀 헥깔릴 수 있는데요. 함수와 제네레이터 , 코루틴 모두 def 를 통해 만듭니다.
이것에 대해 모두 다르게 표시해야 한다고 주장하는 사람들이 있으며,
파이썬의 창조자 귀도는 이에 반대하여 def 로 통일되어 있다고 합니다.
중요한것은 코루틴은 반복이 목적이 아닙니다. 반복이 목적인 것은 분명히 제네레이터의 역할입니다.
코루틴은 외부와의 상호 작용입니다.
"""

def coro():
    hello = yield "Hello"
    yield hello

c = coro()
print(next(c))
print(c.send("World"))
